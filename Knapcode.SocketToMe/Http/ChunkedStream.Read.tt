<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Knapcode.SocketToMe.Http
{
    public partial class ChunkedStream
    {
<# foreach(bool isAsync in new[] { false, true })
    {
    #>
        public override <#=(isAsync ? "async Task<" : "")#>int<#=(isAsync ? ">" : "")#> Read<#=(isAsync ? "Async" : "")#>(byte[] buffer, int offset, int count<#=(isAsync ? ", CancellationToken cancellationToken" : "")#>)
        {
            if (_remaining <= 0)
            {
                var line = <#=(isAsync ? "await " : "")#>_byteStreamReader.ReadLine<#=(isAsync ? "Async" : "")#>();
                _chunkSize = (int)Convert.ToUInt32(line, 16);
                _remaining = _chunkSize;
            }

            int read = 0;
            if(_remaining > 0)
            {
                int actualCount = Math.Min(count, _remaining);
                read = <#=(isAsync ? "await " : "")#>_byteStreamReader.Read<#=(isAsync ? "Async" : "")#>(buffer, offset, actualCount);
                _remaining -= read;
            }

            if (_remaining == 0)
            {
                <#=(isAsync ? "await " : "")#>_byteStreamReader.ReadLine<#=(isAsync ? "Async" : "")#>();
            }

            return read;
        }<#=(isAsync ? "" : "\r\n")#>
<#
    }
    #>
    }
}